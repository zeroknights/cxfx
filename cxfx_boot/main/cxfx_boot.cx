package main

// Lib Import

import "app"
import "gam"
import "gfx"
import "gui"
import "m44"
import "mat"
import "v3"
import "v4"
import "snd"


// Screens

var menuScreen gui.ScreenId
var titleScreen gui.ScreenId
var bootScreen gui.ScreenId
var initScreen gui.ScreenId
var introScreen gui.ScreenId
var delayScreen gui.ScreenId


// Sound Anim Var

var audioId snd.AudioId
var voiceId snd.VoiceId

// Boot Anim Var

var boot_Animation_Texture gfx.TextureId
var boot_Animation_Mesh gfx.MeshId
var boot_Animation gui.AnimationId
var boot_Animation_Frame_Count i32
var boot_Animation_Frame_Index i32

// Canvas Var
var canvas_init gfx.MeshId
var canvas_intro gfx.MeshId
var canvas_menu gfx.MeshId
var canvas_delay gfx.MeshId

// Game Exit Key
//-----------------------------------------------------------------------//

func gameOnEvent(controlIndex i32, controlAction i32) {
	var key i32 = gui.CurrentEvent.keyboard.key
	var action i32 = gui.CurrentEvent.keyboard.action
	var mods i32 = gui.CurrentEvent.keyboard.mods
	if mods == app.MOD_NONE {
		if key == app.KEYCODE_ESCAPE && action == app.KEY_PRESS {
			app.Exit()
		}
	}
}


	
// Render Canvas delay
//-----------------------------------------------------------------------//
	func gameOnRender_canvas_delay(controlIndex i32, controlAction i32) {

	// Size of Canvas delay Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas delay 
	gfx.MeshBegin(canvas_delay)
	gfx.MeshAppendOrthoQuad(canvas_delay,
			v4.make(x, y, w, h),
			v4.GREEN,
			v4.GREEN,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_delay)
	
	// Canvas Intro Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_delay)
	
	}
	
	
	// Render Canvas Intro 
//-----------------------------------------------------------------------//

func gameOnRender_canvas_intro(controlIndex i32, controlAction i32) {

	// Size of Canvas Intro Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas Intro 
	gfx.MeshBegin(canvas_intro)
	gfx.MeshAppendOrthoQuad(canvas_intro,
			v4.make(x, y, w, h),
			v4.GREEN,
			v4.GREEN,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_intro)
	
	// Canvas Intro Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_intro)
	
	}
	
	
// Render Boot Animation And Sound
//-----------------------------------------------------------------------//

	func gameOnRender_animation(controlIndex i32, controlAction i32) {
	
		// Play CXFX Boot Sound 
	if snd.VoiceState(voiceId) == snd.VOICE_STOPPED {
		snd.VoicePlay(voiceId)
	}
	
	// Size of Boot Animation Model
	var w f32 = gfx.TextureWidthF32(boot_Animation_Texture) / 1.5
	var h f32 = gfx.TextureHeightF32(boot_Animation_Texture) / 1.5
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0

	// Mesh Creation Boot Animation
	gfx.MeshBegin(boot_Animation_Mesh)
	gfx.MeshAppendOrthoQuad(boot_Animation_Mesh,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(boot_Animation_Mesh)
	
	// Animation Linked to Texture Id
	boot_Animation_Texture = gui.AnimationGetFrame(boot_Animation, boot_Animation_Frame_Index) // ISSUE : can't be named texture : silently clash with global variable
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, boot_Animation_Texture, gfx.g_linearWrap)
	gfx.MeshRender(boot_Animation_Mesh)
	
	// Animation Frame Index
    boot_Animation_Frame_Index = boot_Animation_Frame_Index + 1 // adjust based on delta time
    boot_Animation_Frame_Index = boot_Animation_Frame_Index % gui.AnimationFrameCount(boot_Animation)
	
	
	}

// Render Menu Canvas and Buttons
//-----------------------------------------------------------------------//

	func gameOnRender_menu(controlIndex i32, controlAction i32) {
	
	// Size of Menu Canvas Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas Menu
	gfx.MeshBegin(canvas_menu)
	gfx.MeshAppendOrthoQuad(canvas_menu,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.BLUE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_menu)
	
	// Canvas Menu Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_menu)
	
	}

	
// Render Init Canvas
//-----------------------------------------------------------------------//

	func gameOnRender_init(controlIndex i32, controlAction i32) {
	
	// Size of Init Canvas Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas Init
	gfx.MeshBegin(canvas_init)
	gfx.MeshAppendOrthoQuad(canvas_init,
			v4.make(x, y, w, h),
			v4.RED,
			v4.RED,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_init)
	
	// Canvas Menu Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_init)
	
	}
	
	


// Main Function
//-----------------------------------------------------------------------//

func main()() {

	// Init 
	gam.Init("CXFX Game Boot Animation", 1280, 720, 60, "Created By CXFX Team and Friends")

	
	// Init Screen red
	initScreen = gui.ScreenCreate("initScreen")
	gui.ControlSetDock(initScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(initScreen, -1.0D)
	gui.ScreenSetOnEvent(initScreen, "main", "gameOnEvent")
	gui.ScreenSetOnRender(initScreen, "main", "gameOnRender_init")

	{
	
	// Lock Init Mesh
	canvas_init = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}
	
	
	// Menu Screen
	menuScreen = gui.ScreenCreate("menuScreen")
	gui.ControlSetDock(menuScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(menuScreen, 8.0D)
	gui.ScreenSetOnRender(menuScreen, "main", "gameOnRender_menu")
	gui.ScreenSetOnNext(menuScreen, initScreen)
	{
		var menu_title gui.LabelId = gui.LabelCreate("menu_title")
		gui.ControlAddChild(menuScreen.base, menu_title.base)
		gui.ControlSetSkin(menu_title.base, gui.g_blueSkin)
		gui.ControlSetDock(menu_title.base, gui.DOCK_TOP)
		gui.ControlSetFocusable(menu_title.base, 1)
		gui.ControlSetPadding(menu_title.base, v4.makef(5.0))
		gui.ControlSetAutosize(menu_title.base, gui.AUTOSIZE_Y)
		gui.LabelSetFont(menu_title, gui.g_boldFont)
		gui.LabelSetText(menu_title, "Main Menu")
		gui.LabelSetSize(menu_title, gui.g_fontSizeButton)
		gui.LabelSetColor(menu_title, gui.g_white)
		gui.LabelSetAlign(menu_title, gui.ALIGN_CENTER)
		
	canvas_menu = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}
	

	// Title Screen black 
	titleScreen = gui.ScreenCreate("titleScreen")
	gui.ControlSetDock(titleScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(titleScreen, 6.0D)
	gui.ScreenSetOnNext(titleScreen, menuScreen)
	
	{
	
	// Properties and Render of Game Title 
	var label gui.LabelId = gui.LabelCreate("titleLabel")
	gui.ControlAddChild(titleScreen.base, label.base)
	gui.ControlSetBounds(label.base, v4.make(0.0, 0.0, gfx.gfx_width, gfx.gfx_height))
	gui.ControlSetAlign(label.base, gui.ALIGN_CENTER)
	gui.LabelSetFont(label, gui.g_boldFont)
	gui.LabelSetText(label, app.Name())
	gui.LabelSetSize(label, gui.g_fontSizeTitle)
	gui.LabelSetAlign(label, gui.ALIGN_CENTER)
	gui.LabelSetColor(label, gui.g_gold)
		
	}
	
	// Boot Screen white
	bootScreen = gui.ScreenCreate("bootScreen")
	gui.ControlSetDock(bootScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(bootScreen, 3.0D)
	gui.ScreenSetOnRender(bootScreen, "main", "gameOnRender_animation")
	gui.ScreenSetOnNext(bootScreen, titleScreen)
	{
	
	// Boot Animation Sound Source 
	audioId = snd.AudioCreate(sprintf("%s/audios/skycoin_baby.wav", app.DataDir()))
	voiceId = snd.VoiceCreate(audioId)
	
	// Lock Mesh
	boot_Animation_Mesh = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)

	// Boot Animation Source 
	boot_Animation = gui.AnimationCreateFromPath(sprintf("%s/boot/cxfx_boot.gif", app.DataDir()))
		
	
	
	}
	
	// Intro Screen
	introScreen = gui.ScreenCreate("introScreen")
	gui.ControlSetDock(introScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(introScreen, 4.0D)
	gui.ScreenSetOnRender(introScreen, "main", "gameOnRender_canvas_intro")
	gui.ScreenSetOnNext(introScreen, bootScreen)
	{
	
	canvas_intro = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}
	

	// Delay Screen
	delayScreen = gui.ScreenCreate("delayScreen")
	gui.ControlSetDock(delayScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(delayScreen, 1.0D)
	gui.ScreenSetOnRender(delayScreen, "main", "gameOnRender_canvas_delay")
	gui.ScreenSetOnNext(delayScreen, introScreen)
	{
	
	canvas_delay = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}

	// run
	gui.ScreenShow(delayScreen)
	gam.Run(2U)

	// Destroy
	gfx.MeshUnlock(boot_Animation_Mesh)
	gfx.MeshUnlock(canvas_intro)
	gfx.MeshUnlock(canvas_menu)
	gfx.MeshUnlock(canvas_delay)
	gfx.MeshUnlock(canvas_init)
	
	//gam.Destroy()//ISSUE : can't call gam.Destroy()()
}

