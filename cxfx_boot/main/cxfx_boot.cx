package main

// Lib Import

import "app"
import "gam"
import "gfx"
import "gui"
import "m44"
import "mat"
import "v3"
import "v4"
import "snd"

// Boot Anim Var

var boot_Animation_Texture gfx.TextureId
var boot_Animation_Mesh gfx.MeshId
var boot_Animation gui.AnimationId
var boot_Animation_Frame_Count i32
var boot_Animation_Frame_Index i32

// Game Exit Key
//-----------------------------------------------------------------------//

func gameOnEvent(controlIndex i32, controlAction i32) {
	var key i32 = gui.CurrentEvent.keyboard.key
	var action i32 = gui.CurrentEvent.keyboard.action
	var mods i32 = gui.CurrentEvent.keyboard.mods
	if mods == app.MOD_NONE {
		if key == app.KEYCODE_ESCAPE && action == app.KEY_PRESS {
			app.Exit()
		}
	}
}

// Game Update
//-----------------------------------------------------------------------//

func gameOnUpdate(controlIndex i32, controlAction i32) {
}

// Render TextureId to Mesh
//-----------------------------------------------------------------------//

func gameOnRender(controlIndex i32, controlAction i32) {
	
	// Size of Model
	var w f32 = gfx.TextureWidthF32(boot_Animation_Texture) / 1.0
	var h f32 = gfx.TextureHeightF32(boot_Animation_Texture) / 1.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0

	// Mesh Creation
	gfx.MeshBegin(boot_Animation_Mesh)
	gfx.MeshAppendOrthoQuad(boot_Animation_Mesh,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(boot_Animation_Mesh)

	// Animation Linked to Texture Id
	boot_Animation_Texture = gui.AnimationGetFrame(boot_Animation, boot_Animation_Frame_Index) // ISSUE : can't be named texture : silently clash with global variable
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, boot_Animation_Texture, gfx.g_linearWrap)
	gfx.MeshRender(boot_Animation_Mesh)
	
	// Animation Linked to Texture Id
    boot_Animation_Frame_Index = boot_Animation_Frame_Index + 1 // adjust based on delta time
    boot_Animation_Frame_Index = boot_Animation_Frame_Index % gui.AnimationFrameCount(boot_Animation)
	
}

// Main Function

func main()() {

// Init 
	gam.Init("CXFX Game Boot Animation", 1280, 800, 60, "")

	// Lock Mesh
	boot_Animation_Mesh = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)

	// Boot Animation Source 
	boot_Animation = gui.AnimationCreateFromPath(sprintf("%s/boot/cxfx_boot.gif", app.DataDir()))

	// Game Screen
	var gameScreen gui.ScreenId = gui.ScreenCreate("gameScreen")
	gui.ControlSetDock(gameScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(gameScreen, -1.0D)
	gui.ScreenSetOnEvent(gameScreen, "main", "gameOnEvent")
	gui.ScreenSetOnUpdate(gameScreen, "main", "gameOnUpdate")
	gui.ScreenSetOnRender(gameScreen, "main", "gameOnRender")

	// Run
	gui.ScreenShow(gameScreen)
	gam.Run(2U)

	// Destroy
	gfx.MeshUnlock(boot_Animation_Mesh)
	gam.Destroy()
}

