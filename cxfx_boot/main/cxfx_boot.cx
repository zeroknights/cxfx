package main

// Lib Import

import "os"	
import "app"
import "gam"
import "gfx"
import "gui"
import "m44"
import "mat"
import "v3"
import "v4"
import "snd"
import "v2"
import "fps"
import "q4"
import "time"
import "gl"
import "glfw"

// Canvas Textures

var intro_canvas_texture gfx.TextureId
var loading_bar_texture gfx.TextureId

// Font

var font_mesh_intro gfx.MeshId
var font_texture_intro gfx.TextureId
var font str = "skycoinRegular"
var loading_text str = ""
var loading_text_frames gui.AnimationId

// Screens

var menuScreen gui.ScreenId
var titleScreen gui.ScreenId
var bootScreen gui.ScreenId
var initScreen gui.ScreenId
var introScreen gui.ScreenId
var delayScreen gui.ScreenId


// Sound Anim Var

var audioId snd.AudioId
var voiceId snd.VoiceId

// Boot Anim Var

var boot_Animation_Texture gfx.TextureId
var boot_Animation_Mesh gfx.MeshId
var boot_Animation gui.AnimationId
var boot_Animation_Frame_Count i32
var boot_Animation_Frame_Index i32

// Canvas Var
var canvas_init gfx.MeshId
var canvas_intro gfx.MeshId
var canvas_menu gfx.MeshId
var canvas_delay gfx.MeshId

// Graphic effects

var loading_bar gfx.MeshId

// Loading Bar
var loading_bar_width_time f32 = 0.0

var dt f32 = f64.f32(fps.DeltaSecond())





// Game Exit Key
//-----------------------------------------------------------------------//

func gameOnEvent(controlIndex i32, controlAction i32) {
	var key i32 = gui.CurrentEvent.keyboard.key
	var action i32 = gui.CurrentEvent.keyboard.action
	var mods i32 = gui.CurrentEvent.keyboard.mods
	if mods == app.MOD_NONE {
		if key == app.KEYCODE_ESCAPE && action == app.KEY_PRESS {
			app.Exit()
		}
	}
}



// loading bar string loop array
//-----------------------------------------------------------------------//


func delay(mydelay f64) {

	mydelay = mydelay * f32.f64(1e9) //convert input into nano seconds 
	var startTime f64 = i64.f64(time.UnixNano()) //read current timestamp

	startLabel: // goto jump location for looping
		var elapsedTime f64 = i64.f64(time.UnixNano()) - startTime //update elapsed time

	if elapsedTime < mydelay { //if elapsed time is not greater than my input the keep looping
		goto startLabel //goto label to keep delaying
	}
}


	
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
	



// Render Canvas delay
//-----------------------------------------------------------------------//
	func gameOnRender_canvas_delay(controlIndex i32, controlAction i32) {

	// Size of Canvas delay Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas delay 
	gfx.MeshBegin(canvas_delay)
	gfx.MeshAppendOrthoQuad(canvas_delay,
			v4.make(x, y, w, h),
			v4.GREEN,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_delay)
	
	// Canvas Intro Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_delay)
	
	}
	
	
	// Render Canvas Intro 
//-----------------------------------------------------------------------//



func gameOnRender_canvas_intro(controlIndex i32, controlAction i32) {

	


	// Size of Canvas Intro Model
	var w f32 = gfx.TextureWidthF32(intro_canvas_texture) / 1.0
	var h f32 = gfx.TextureHeightF32(intro_canvas_texture) / 1.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas Intro 
	gfx.MeshBegin(canvas_intro)
	gfx.MeshAppendOrthoQuad(canvas_intro,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_intro)
	
	// Canvas Intro Color Apply
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, intro_canvas_texture, gfx.g_linearWrap)
	gfx.MeshRender(canvas_intro)
	
	
	var textWidth i32
	var textHeight i32
	textWidth, textHeight = gfx.MeasureText(font, loading_text)
	
	var wf f32 = i32.f32(textWidth) / 1200.0
	var hf f32 = i32.f32(textHeight) / 400.0
	var xf f32 = (gfx.gfx_viewportSize.x - wf) / 2.35
	var yf f32 = (gfx.gfx_viewportSize.y - hf) / 3.23

	
	gfx.MeshBegin(font_mesh_intro)
	gfx.MeshAppendText(font_mesh_intro, font_texture_intro, font,
			v2.make(xf, yf), v2.make(wf, hf),
			v4.ONE,
			loading_text,
			false, v4.BLUE, v4.BLUE, // TODO remove debug arguments
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(font_mesh_intro)
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, font_texture_intro, gfx.g_linearWrap)
	gfx.EnableBlending(gfx.SRC_ALPHA, gfx.ONE_MINUS_SRC_ALPHA)
	gfx.MeshRender(font_mesh_intro)
	
	
	
	
	
	
//--------------------------------------------------------------------------------//


	
	
	
	// Size of loading bar Model
	var wb f32 = gfx.TextureWidthF32(loading_bar_texture) / 10.0
	var hb f32 = gfx.TextureHeightF32(loading_bar_texture) / 10.0
	var xb f32 = (gfx.gfx_viewportSize.x - wb) / 2.0
	var yb f32 = (gfx.gfx_viewportSize.y - hb) / 3.63


		
	loading_bar_width_time = loading_bar_width_time + 0.25 * dt
	
	if loading_bar_width_time <= wb {
		loading_bar_width_time = loading_bar_width_time + 0.45
		} else {
		loading_bar_width_time = wb
			}

	
	
	// Mesh Creation Canvas Intro 
	gfx.MeshBegin(loading_bar)
	gfx.MeshAppendOrthoQuad(loading_bar,
			v4.make(xb, yb, loading_bar_width_time, hb),
			v4.BLUE,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(loading_bar)
	
	// Canvas Intro Color Apply
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, loading_bar_texture, gfx.g_linearWrap)
	gfx.MeshRender(loading_bar)
	

	
}
 	
	
// Render Boot Animation And Sound
//-----------------------------------------------------------------------//

	func gameOnRender_animation(controlIndex i32, controlAction i32) {
	
	
		// Play CXFX Boot Sound 
	if snd.VoiceState(voiceId) == snd.VOICE_STOPPED {
		snd.VoicePlay(voiceId)
	}
	
	// Size of Boot Animation Model
	var w f32 = gfx.TextureWidthF32(boot_Animation_Texture) / 1.5
	var h f32 = gfx.TextureHeightF32(boot_Animation_Texture) / 1.5
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0

	// Mesh Creation Boot Animation
	gfx.MeshBegin(boot_Animation_Mesh)
	gfx.MeshAppendOrthoQuad(boot_Animation_Mesh,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(boot_Animation_Mesh)
	
	// Animation Linked to Texture Id
	boot_Animation_Texture = gui.AnimationGetFrame(boot_Animation, boot_Animation_Frame_Index) // ISSUE : can't be named texture : silently clash with global variable
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, boot_Animation_Texture, gfx.g_linearWrap)
	gfx.MeshRender(boot_Animation_Mesh)
	
	// Animation Frame Index
    boot_Animation_Frame_Index = boot_Animation_Frame_Index + 1 // adjust based on delta time
    boot_Animation_Frame_Index = boot_Animation_Frame_Index % gui.AnimationFrameCount(boot_Animation)
	
	
	}

// Render Menu Canvas and Buttons
//-----------------------------------------------------------------------//

	func gameOnRender_menu(controlIndex i32, controlAction i32) {
	
	// Size of Menu Canvas Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas Menu
	gfx.MeshBegin(canvas_menu)
	gfx.MeshAppendOrthoQuad(canvas_menu,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.BLUE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_menu)
	
	// Canvas Menu Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_menu)
	
	}

	
// Render Init Canvas
//-----------------------------------------------------------------------//

	func gameOnRender_init(controlIndex i32, controlAction i32) {
	
	// Size of Init Canvas Model
	var w f32 = 1280.0
	var h f32 = 720.0
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0
	
	// Mesh Creation Canvas Init
	gfx.MeshBegin(canvas_init)
	gfx.MeshAppendOrthoQuad(canvas_init,
			v4.make(x, y, w, h),
			v4.RED,
			v4.RED,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas_init)
	
	// Canvas Menu Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas_init)
	
	}
	



// Main Function
//-----------------------------------------------------------------------//

func main()() {

	// Init 
	gam.Init("CXFX Game Boot Animation", 1280, 720, 60, "Created By CXFX Team and Friends")

	
	// Init Screen red
	initScreen = gui.ScreenCreate("initScreen")
	gui.ControlSetDock(initScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(initScreen, -1.0D)
	gui.ScreenSetOnEvent(initScreen, "main", "gameOnEvent")
	gui.ScreenSetOnRender(initScreen, "main", "gameOnRender_init")

	{
	
	// Lock Init Mesh
	canvas_init = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}
	
	
	// Menu Screen
	menuScreen = gui.ScreenCreate("menuScreen")
	gui.ControlSetDock(menuScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(menuScreen, 8.0D)
	gui.ScreenSetOnRender(menuScreen, "main", "gameOnRender_menu")
	gui.ScreenSetOnNext(menuScreen, initScreen)
	{
		var menu_title gui.LabelId = gui.LabelCreate("menu_title")
		gui.ControlAddChild(menuScreen.base, menu_title.base)
		gui.ControlSetSkin(menu_title.base, gui.g_blueSkin)
		gui.ControlSetDock(menu_title.base, gui.DOCK_TOP)
		gui.ControlSetFocusable(menu_title.base, 1)
		gui.ControlSetPadding(menu_title.base, v4.makef(5.0))
		gui.ControlSetAutosize(menu_title.base, gui.AUTOSIZE_Y)
		gui.LabelSetFont(menu_title, gui.g_boldFont)
		gui.LabelSetText(menu_title, "Main Menu")
		gui.LabelSetSize(menu_title, gui.g_fontSizeButton)
		gui.LabelSetColor(menu_title, gui.g_white)
		gui.LabelSetAlign(menu_title, gui.ALIGN_CENTER)
		
	canvas_menu = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}
	

	// Title Screen black 
	titleScreen = gui.ScreenCreate("titleScreen")
	gui.ControlSetDock(titleScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(titleScreen, 6.0D)
	gui.ScreenSetOnNext(titleScreen, menuScreen)
	
	
	{
	
	// Properties and Render of Game Title 
	var label gui.LabelId = gui.LabelCreate("titleLabel")
	gui.ControlAddChild(titleScreen.base, label.base)
	gui.ControlSetBounds(label.base, v4.make(0.0, 0.0, gfx.gfx_width, gfx.gfx_height))
	gui.ControlSetAlign(label.base, gui.ALIGN_CENTER)
	gui.LabelSetFont(label, gui.g_boldFont)
	gui.LabelSetText(label, app.Name())
	gui.LabelSetSize(label, gui.g_fontSizeTitle)
	gui.LabelSetAlign(label, gui.ALIGN_CENTER)
	gui.LabelSetColor(label, gui.g_gold)
	
	}
	
	// Boot Screen white
	bootScreen = gui.ScreenCreate("bootScreen")
	gui.ControlSetDock(bootScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(bootScreen, 3.0D)
	gui.ScreenSetOnRender(bootScreen, "main", "gameOnRender_animation")
	gui.ScreenSetOnNext(bootScreen, titleScreen)
	{
	
	// Boot Animation Sound Source 
	audioId = snd.AudioCreate(sprintf("%s/audios/skycoin_baby.wav", app.DataDir()))
	voiceId = snd.VoiceCreate(audioId)
	
	// Lock Mesh
	boot_Animation_Mesh = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)

	// Boot Animation Source 
	boot_Animation = gui.AnimationCreateFromPath(sprintf("%s/boot/cxfx_boot.gif", app.DataDir()))
		
	
	
	}
	
	// Intro Screen
	introScreen = gui.ScreenCreate("introScreen")
	gui.ControlSetDock(introScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(introScreen, 15.0D)
	gui.ScreenSetOnRender(introScreen, "main", "gameOnRender_canvas_intro")
	gui.ScreenSetOnUpdate(introScreen, "main", "delay")
	gui.ScreenSetOnUpdate(introScreen, "main", "gameOnRender_canvas_intro")
	gui.ScreenSetOnNext(introScreen, bootScreen)
	{
	
	
	
	canvas_intro = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	intro_canvas_texture = gfx.TextureCreate(sprintf("%s/textures/intro_canvas_texture.png", gam.DataDir()),
		gfx.FORMAT_R8_G8_B8_A8, 0, 0, -1, false)
		
	var nameLen i32 = len(app.Name())
	font_mesh_intro = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, nameLen * 6, gfx.g_vertexLayout, nameLen * 4)
	font_texture_intro = gfx.TextureCreateFont(font, sprintf("%s/fonts/Skycoin-Regular.ttf", app.DataDir()),
		64, 32, 127, gfx.TEXT_LEFT_TO_RIGHT, -1)
		
	loading_bar = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	loading_bar_texture = gfx.TextureCreate(sprintf("%s/textures/loading_bar_texture.png", gam.DataDir()),
		gfx.FORMAT_R8_G8_B8_A8, 0, 0, -1, false)
	
		var delayTime f64 = f32.f64(3.25) //delay time of 2 seconds

	var loading_text_place_hold [5]str
	loading_text_place_hold[0] = "Sounds"  // Assign a value to the first element
	loading_text_place_hold[1] = "Texture" // Assign a value to the second element
	loading_text_place_hold[2] = "Meshes"  // Assign a value to the third element
	loading_text_place_hold[3] = "Scenes"  // Assign a value to the third element
	loading_text_place_hold[4] = "Animations"  // Assign a value to the third element
	
	var loading_text_length i32 = len(loading_text_place_hold)

	var word_count i32 = 0
	
	var resources str = ""

		for word_count = 0; word_count <= loading_text_length; word_count++ {
			resources = loading_text_place_hold[word_count]
            loading_text = "Loading" + " " + resources
			word_count = word_count + 1
			delay(delayTime)
			}
			
	}
	

	// Delay Screen
	delayScreen = gui.ScreenCreate("delayScreen")
	gui.ControlSetDock(delayScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(delayScreen, 1.0D)
	gui.ScreenSetOnRender(delayScreen, "main", "gameOnRender_canvas_delay")
	gui.ScreenSetOnNext(delayScreen, introScreen)
	{
	
	canvas_delay = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}

	// run
	gui.ScreenShow(delayScreen)
	gam.Run(2U)

	// Destroy
	gfx.MeshUnlock(boot_Animation_Mesh)
	gfx.MeshUnlock(canvas_intro)
	gfx.MeshUnlock(canvas_menu)
	gfx.MeshUnlock(canvas_delay)
	gfx.MeshUnlock(canvas_init)
	
	//gam.Destroy()//ISSUE : can't call gam.Destroy()()
}

