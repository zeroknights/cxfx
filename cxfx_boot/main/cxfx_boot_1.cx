package main

// Lib Import

import "app"
import "gam"
import "gfx"
import "gui"
import "m44"
import "mat"
import "v3"
import "v4"
import "snd"

// Screens
var gameScreen gui.ScreenId
var titleScreen gui.ScreenId
var skycoinScreen gui.ScreenId
var bootScreen gui.ScreenId

// Boot Anim Var
var canvas gfx.MeshId
var canvas2 gfx.MeshId
var boot_Animation_Texture gfx.TextureId
var boot_Animation_Mesh gfx.MeshId
var boot_Animation gui.AnimationId
var boot_Animation_Frame_Count i32
var boot_Animation_Frame_Index i32

// Game Exit Key
//-----------------------------------------------------------------------//

func gameOnEvent(controlIndex i32, controlAction i32) {
	var key i32 = gui.CurrentEvent.keyboard.key
	var action i32 = gui.CurrentEvent.keyboard.action
	var mods i32 = gui.CurrentEvent.keyboard.mods
	if mods == app.MOD_NONE {
		if key == app.KEYCODE_ESCAPE && action == app.KEY_PRESS {
			app.Exit()
		}
	}
}

// Render TextureId to Mesh
//-----------------------------------------------------------------------//

func gameOnRender_canvas(controlIndex i32, controlAction i32) {

	// Size of Canvas Model
	var wc f32 = 1280.0
	var hc f32 = 720.0
	var xc f32 = (gfx.gfx_viewportSize.x - wc) / 2.0
	var yc f32 = (gfx.gfx_viewportSize.y - hc) / 2.0
	
	// Mesh Creation Canvas White
	gfx.MeshBegin(canvas)
	gfx.MeshAppendOrthoQuad(canvas,
			v4.make(xc, yc, wc, hc),
			v4.BLUE,
			v4.GREEN,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas)
	
	// Canvas Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas)
	
	}
	
	func gameOnRender_animation(controlIndex i32, controlAction i32) {
	
	// Size of Boot Animation Model
	var w f32 = gfx.TextureWidthF32(boot_Animation_Texture) / 1.5
	var h f32 = gfx.TextureHeightF32(boot_Animation_Texture) / 1.5
	var x f32 = (gfx.gfx_viewportSize.x - w) / 2.0
	var y f32 = (gfx.gfx_viewportSize.y - h) / 2.0

	// Mesh Creation Boot Animation
	gfx.MeshBegin(boot_Animation_Mesh)
	gfx.MeshAppendOrthoQuad(boot_Animation_Mesh,
			v4.make(x, y, w, h),
			v4.BLUE,
			v4.ONE,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(boot_Animation_Mesh)
	
	// Animation Linked to Texture Id
	boot_Animation_Texture = gui.AnimationGetFrame(boot_Animation, boot_Animation_Frame_Index) // ISSUE : can't be named texture : silently clash with global variable
	gfx.EffectUse(gfx.g_fxTexture2D)
	gfx.EffectAssignTexture(gfx.g_fxTexture2D, gfx.SAMPLER_COLOR_0, boot_Animation_Texture, gfx.g_linearWrap)
	gfx.MeshRender(boot_Animation_Mesh)
	
		// Animation Frame Index
    boot_Animation_Frame_Index = boot_Animation_Frame_Index + 1 // adjust based on delta time
    boot_Animation_Frame_Index = boot_Animation_Frame_Index % gui.AnimationFrameCount(boot_Animation)

	}


	func gameOnRender(controlIndex i32, controlAction i32) {
		// Size of Canvas Model
	var wc2 f32 = 1280.0
	var hc2 f32 = 720.0
	var xc2 f32 = (gfx.gfx_viewportSize.x - wc2) / 2.0
	var yc2 f32 = (gfx.gfx_viewportSize.y - hc2) / 2.0
	
	// Mesh Creation Canvas White
	gfx.MeshBegin(canvas2)
	gfx.MeshAppendOrthoQuad(canvas2,
			v4.make(xc2, yc2, wc2, hc2),
			v4.BLUE,
			v4.RED,
			v4.make(0.0, 0.0, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y),
			0.0)
	gfx.MeshEnd(canvas2)
	
	// Canvas Color Apply
	gfx.EffectUse(gfx.g_fxVertexColor2D)
	gfx.MeshRender(canvas2)
	}

// Main Function

func main()() {

// Init 
	gam.Init("CXFX Game Boot Animation", 1280, 720, 60, "Created By Zero Knights")

	
	// gameScreen red like  
	gameScreen = gui.ScreenCreate("gameScreen")
	gui.ControlSetDock(gameScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(gameScreen, -1.0D)
	gui.ScreenSetOnEvent(gameScreen, "main", "gameOnEvent")
	gui.ScreenSetOnRender(gameScreen, "main", "gameOnRender")
	


	// titleScreen
	titleScreen = gui.ScreenCreate("titleScreen")
	gui.ControlSetDock(titleScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(titleScreen, 6.0D)
	gui.ScreenSetOnNext(titleScreen, skycoinScreen)
	
	{
		
		
		var label gui.LabelId = gui.LabelCreate("titleLabel")
		gui.ControlAddChild(titleScreen.base, label.base)
		gui.ControlSetBounds(label.base, v4.make(0.0, 0.0, gfx.gfx_width, gfx.gfx_height))
		gui.ControlSetAlign(label.base, gui.ALIGN_CENTER)
		gui.LabelSetFont(label, gui.g_boldFont)
		gui.LabelSetText(label, app.Name())
		gui.LabelSetSize(label, gui.g_fontSizeTitle)
		gui.LabelSetAlign(label, gui.ALIGN_CENTER)
		gui.LabelSetColor(label, gui.g_gold)
		
	}
	
	
	// skycoinScreen
	skycoinScreen = gui.ScreenCreate("skycoinSceen")
	gui.ControlSetDock(skycoinScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(skycoinScreen, 3.10D)
	gui.ScreenSetOnRender(skycoinScreen, "main", "gameOnRender_animation")
	gui.ScreenSetOnNext(skycoinScreen, titleScreen)
	{
	
	
		// Lock Mesh
	boot_Animation_Mesh = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)

	// Boot Animation Source 
	boot_Animation = gui.AnimationCreateFromPath(sprintf("%s/boot/cxfx_boot.gif", app.DataDir()))
		

	
	
	}

	// bootScreen
	bootScreen = gui.ScreenCreate("bootScreen")
	gui.ControlSetSkin(bootScreen.base, gui.g_bootSkin)
	gui.ControlSetDock(bootScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(bootScreen, 1.0D)
	gui.ScreenSetOnRender(bootScreen, "main", "gameOnRender_canvas")
	gui.ScreenSetOnNext(bootScreen, skycoinScreen)
	{
	
	canvas = gfx.MeshLock(gfx.TRIANGLES, gfx.UNSIGNED_SHORT, 6, gfx.g_vertexLayout, 4)
	
	}

	// run
	gui.ScreenShow(bootScreen)
	gam.Run(2U)

	// Destroy
	gfx.MeshUnlock(boot_Animation_Mesh)
	gfx.MeshUnlock(canvas)
	//gam.Destroy()//ISSUE : can't call gam.Destroy()()
}

